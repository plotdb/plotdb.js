{"ownername":"plotdb","key":1003,"name":"Pie Bubble","owner":4,"theme":null,"parent":null,"description":"bubble size as the summation and pie in bubble for comparison","basetype":["3","5"],"visualencoding":["5","6"],"category":["1","4"],"tags":["rate","percent","compare"],"likes":5,"searchable":true,"dimlen":3,"createdtime":"2016-03-15T15:53:38.000Z","modifiedtime":"2017-04-05T01:56:28.000Z","doc":{"name":"document","size":0,"type":"html","lines":1,"content":""},"style":{"name":"stylesheet","size":0,"type":"css","lines":1,"content":""},"code":{"name":"code","size":8920,"type":"javascript","lines":228,"content":"{\n  ref: \"http://www.nytimes.com/interactive/2012/09/06/us/politics/convention-word-counts.html#Government\",\n  sample: function() {\n    var list = d3.range(37 + Math.round(Math.random() * 6));\n    return {\n      value1: [{name: \"Value1\", data: list.map(function(d,i) { return parseInt(Math.random() * 1000); })}],\n      value2: [{name: \"Value2\", data: list.map(function(d,i) { return parseInt(Math.random() * 1000); })}],\n      name: [{name: \"Name\", data: list.map(function(d,i) { return plotdb.data.sample.name[i % plotdb.data.sample.name.length]; })}]\n    };\n  },\n  dimension: {\n    value1: { type: [plotdb.Number], require: true },\n    value2: { type: [plotdb.Number], require: true },\n    name: { type: [], require: false }\n  },\n  config: {\n    fontFamily: {},\n    background: {},\n    textFill: {},\n    fontSize: {},\n    margin: {},\n    labelShow: {default: true},\n    labelShadowSize: {},\n    legendLabel: {},\n    legendShow: {},\n    popupShow: {},\n    color1: { name: \"Value1 Color\", type: [plotdb.Color], default: \"#3f7ab5\",\n            hint: plotdb.Color.subtype.positive, rebindOnChange: true},\n    color2: { name: \"Value2 Color\", type: [plotdb.Color], default: \"d93510\",\n            hint: plotdb.Color.subtype.negative, rebindOnChange: true},\n    maxRadius: { name: \"Max Radius\", type: [plotdb.Number], default: 100, rebindOnChange: true }\n  },\n  init: function() {\n    var that = this;\n    this.svg = d3.select(this.root).append(\"svg\");\n    this.legendGroup = this.svg.append(\"g\").attr({class: \"legend-group\"});\n    this.dataGroup = this.svg.append(\"g\").attr({class: \"data-groups\"});\n    this.popup = plotd3.html.tooltip(this.root).on(\"mousemove\", function(d,i,popup) {\n      popup.select(\".title\").text(d.name || \"-\");\n      popup.select(\".value\").text(d.value1 + \" v.s. \" + d.value2);\n    });\n   this.force = d3.layout.force();\n  },\n  parse: function() {\n    var v1, v2, that = this;\n    if(!this.dimension.value1.fields.length) this.data.map(function(d,i) { d.value1 = 0; });\n    if(!this.dimension.value2.fields.length) this.data.map(function(d,i) { d.value2 = 0; });\n    if(!this.dimension.name.fields.length) this.data.map(function(d,i) { d.name = \"\"; });\n    for(var idx = 0;idx < this.data.length; idx++) {\n      this.data[idx].value1 = v1 = parseFloat(this.data[idx].value1);\n      this.data[idx].value2 = v2 = parseFloat(this.data[idx].value2);\n      this.data[idx].value = v1 + v2;\n    }\n    this.data.map(function(it) { \n      it.sum = Math.sqrt(it.value1 + it.value2); \n      v1 = it.value1;\n      v2 = it.value2;\n      rate = 0;\n      if(v1 < 0) v1 = 0;\n      if(v2 < 0) v2 = 0;\n      if(v1 + v2 == 0) rate = 0.5;\n      else {\n        rate = v2 / (v1 + v2);\n      }\n      it.rate = rate;\n    });\n    this.sumRange = d3.extent(this.data.map(function(d) { return d.sum; }));\n    this.rateRange = d3.extent(this.data.map(function(d) { return d.rate; }));\n  },\n  bind: function() {\n   var that = this,sel;\n   this.force.nodes(this.data).charge(function(it) {\n     return -Math.sqrt(it.r) * (that.size / 20);\n   }).on(\"tick\",function() { that.tick(); });\n   sel = this.dataGroup.selectAll(\"g.data-group\").data(this.data);\n   sel.exit().remove();\n   sel.enter().append(\"g\").attr(\"class\",\"data-group\").each(function(d,i) {\n     var node = d3.select(this);\n     node.append(\"circle\").attr({class: \"shadow\", fill: \"none\"});\n     node.append(\"path\").attr({class: \"pie1 data\"});\n     node.append(\"path\").attr({class: \"pie2 data\"});\n     node.append(\"text\").attr({class: \"label shadow\", stroke: \"#000\", \"stroke-width\": 3});\n     node.append(\"text\").attr({class: \"label\"});\n   });\n   this.dataGroup.selectAll(\"g.data-group\").each(function(d,i) {\n     var node = d3.select(this);\n     node.select(\"circle\").datum(d);\n     node.selectAll(\"path\").datum(d);\n     node.selectAll(\"text\").datum(d);\n   });\n   this.circles = this.svg.selectAll(\"g.data-group\");\n   this.circles.selectAll(\"circle\").attr({\n     cx: 0, cy: 0, r: function(d,i) { return d.r; }, stroke: \"#fff\", \"stroke-width\": Math.ceil(this.width / 240)\n   });\n   this.circles.selectAll(\"text\").attr({\n     \"text-anchor\": \"middle\", fill: \"#fff\"\n   }).text(function(d,i) { return d.name; });\n   this.circles.selectAll(\"path\").attr({\n     d: function(d,i) {\n       var r = d.r, rate = d.rate * Math.PI;\n       var rx = r * Math.cos(rate);\n       var ry1 = -r * Math.sin(rate);\n       var ry2 = r * Math.sin(rate);\n       return [\n         \"M\", rx, ry1,\n         \"A\", r, r, 0, (d.value1<d.value2?i:1 - i), i, rx, ry2,\n         \"L\", 0, 0,\n         \"Z\"\n       ].join(\" \")\n     },\n     opacity: 1,\n     fill: function(d,i) {\n       return [that.config.color1, that.config.color2][i];\n     }\n   });\n   if(this.config.popupShow) this.popup.nodes(this.circles);\n   this.force.start();\n  },\n  tick: function() {\n    var a = this.force.alpha(), m = this.config.margin, w = this.width, h = this.height;\n    var legendHeight = (this.config.legendShow ? this.legendSize[1] + this.config.fontSize : 0);\n    for(var i=0,node;i<this.data.length;i++) {\n      node = this.data[i];\n      node.x = node.x + (this.rateScale(node.rate) * w - node.x) * a * 0.1;\n    }\n    for(var i=0,node;i<this.data.length;i++) {\n      node = this.data[i];\n      if(node.x <= node.r) node.x = node.r;\n      if(node.x >= w - node.r - 2 * m) node.x = w - node.r - 2 * m;\n      if(node.y <= node.r) node.y = node.r;\n      if(node.y >= h - node.r - legendHeight - 2 * m) node.y = h - node.r - legendHeight - 2 * m;\n    }\n    this.postrender();\n  },\n  resize: function() {\n    var that = this, newRadius, rebind = false;\n    var box = this.root.getBoundingClientRect();\n    var width = this.width = box.width;\n    var height = this.height = box.height;\n    this.size = (width > height ? height : width);\n    this.popup.fontSize(this.config.fontSize);\n    this.svg.attr({\n      width: width,\n      height: height,\n      viewBox: [0,0,width,height].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n    var legendScale = d3.scale.ordinal().domain([\n      this.dimension.value1.fieldName || this.config.value1Label || \"\",\n      this.dimension.value2.fieldName || this.config.value1Labe2 || \"\",\n    ]).range([\n      this.config.color1,\n      this.config.color2\n    ]);\n    this.legend = plotd3.rwd.legend()\n      .label(this.config.legendLabel || \"\")\n      .scale(legendScale)\n      .orient(\"bottom\")\n      .fontSize(this.config.fontSize);\n    this.legendGroup.call(this.legend).selectAll(\".legend\").on(\"mouseover\", function(d,i) {\n      that.activeGroup = i + 1;\n      that.render();\n    }).on(\"mouseout\", function(d,i) {\n      that.activeGroup = null;\n      that.render();\n    });\n    this.legendSize = (this.config.legendShow ? this.legend.offset() : [0,0]);\n    this.rateScale = d3.scale.linear().domain(this.rateRange).range([0,1]);\n    if(this.config.maxRadius > this.size / 10) {\n      newRadius = this.size / 10;\n      if(this.maxRadius !=newRadius) rebind = true;\n      this.maxRadius = newRadius;\n    } else this.maxRadius = this.config.maxRadius;\n    this.rScale = d3.scale.sqrt()\n      .domain([0,this.sumRange[1]])\n      .range([0,this.maxRadius]);\n    this.data.map(function(it) { it.r = that.rScale(it.sum); });\n    if(rebind) this.bind();\n    if(this.force) this.force.size([\n      this.width - this.config.margin * 2,\n      this.height \n      - (this.config.legendShow ? this.legendSize[1] + this.config.fontSize : 0)\n      - this.config.margin * 2\n    ]).start();\n  },\n  render: function() {\n    var that = this;\n    if(this.config.fontFamily) d3.select(this.root).style(\"font-family\", this.config.fontFamily);\n    d3.select(this.root).style(\"background-color\", this.config.background);\n    this.svg.selectAll(\"text\").attr({\n      \"font-size\": that.config.fontSize,\n      \"fill\": that.config.textFill\n    });\n    this.legendGroup.attr({ transform: [\"translate(\",\n      (this.width - this.legendSize[0]) / 2,\n      this.height - this.legendSize[1] - this.config.margin,\n      \")\"].join(\" \"),\n      display: (this.config.legendShow ? \"block\" : \"none\")\n    });\n    this.dataGroup.attr({\n      transform: [\"translate(\", this.config.margin, this.config.margin, \")\"].join(\" \")\n    });\n    this.circles.each(function(d,i) {\n      var node = d3.select(this);\n      node.selectAll(\"path\").transition().attr({\n        opacity: function(d,i) { if(!that.activeGroup || that.activeGroup == i + 1) return 1; else return 0.2; }\n      });\n      node.selectAll(\"text\").attr({\n        fill: \"#fff\",\n        \"font-size\": that.config.fontSize,\n        dy: \"0.25em\",\n        display: (that.config.labelShow ? \"block\" : \"none\")\n      });\n      node.selectAll(\"text.label.shadow\").attr({\n        \"stroke-width\": that.config.labelShadowSize,\n        fill: \"#000\",\n        stroke: \"#000\"\n      });\n    });\n    this.postrender();\n  },\n  postrender: function() {\n    var that = this;\n    this.circles.attr({\n      transform: function(d,i) { return [\"translate(\",d.x, d.y, \")\"].join(\" \"); }\n    });\n  }\n}"},"assets":[],"dimension":{"value1":{"type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"require":true,"fields":[{"name":"Value1","data":[478,314,330,256,365,765,19,22,936,165,768,623,326,819,717,187,729,513,54,25,446,487,798,366,455,940,98,632,609,725,535,246,359,43,94,194,907,779,2,544,584,39],"datatype":"Number","bind":"value1"}],"fieldName":["Value1"]},"value2":{"type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"require":true,"fields":[{"name":"Value2","data":[9,558,719,728,267,258,823,152,200,518,369,710,757,736,798,817,501,609,214,712,920,529,224,128,930,533,567,454,533,476,149,789,98,189,856,682,970,405,760,468,125,824],"datatype":"Number","bind":"value2"}],"fieldName":["Value2"]},"name":{"type":[],"require":false,"fields":[{"name":"Name","data":["James","Joe","Amelie","Yale","Doraemon","Cindy","David","Frank","Kim","Ken","Leland","Mike","Nick","Oliver","Randy","Andy","Angelica","Zack","Alfred","Edward","Thomas","Percy","Frankenstein","Mary","Toby","Tim","Timonthy","Smith","Karen","Kenny","Jim","Victor","Xavier","Jimmy","Bob","Cynthia","Dory","Dolce","Kirby","Gabriel","Gabby","Watson"],"datatype":"String","bind":"name"}],"fieldName":["Name"]}},"config":{"color1":{"hint":"positive","name":"Value1 Color","type":[{"Gray":"#cccccc","name":"Color","Empty":"#ffffff","level":10,"Neutral":"#cccccc","default":"#dc4521","subtype":{"neutral":"neutral","negative":"negative","positive":"positive"},"Negative":"#d93510","Positive":"#3f7ab5"}],"value":"#d93510","default":"#3f7ab5","rebindOnChange":true},"color2":{"hint":"negative","name":"Value2 Color","type":[{"Gray":"#cccccc","name":"Color","Empty":"#ffffff","level":10,"Neutral":"#cccccc","default":"#dc4521","subtype":{"neutral":"neutral","negative":"negative","positive":"positive"},"Negative":"#d93510","Positive":"#3f7ab5"}],"value":"#3f7ab5","default":"d93510","rebindOnChange":true},"margin":{"max":20,"min":0,"name":"Margin","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":10,"default":10,"category":"Global Settings"},"fontSize":{"name":"Font Size","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":12,"default":13,"category":"Global Settings"},"textFill":{"name":"Text Color","type":[{"Gray":"#cccccc","name":"Color","Empty":"#ffffff","level":10,"Neutral":"#cccccc","default":"#dc4521","subtype":{"neutral":"neutral","negative":"negative","positive":"positive"},"Negative":"#d93510","Positive":"#3f7ab5"}],"value":"#000000","default":"#000000","category":"Global Settings"},"labelShow":{"name":"Show Data Label","type":[{"name":"Boolean","level":8,"order":{},"default":true,"basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}],"value":true,"default":true,"category":"Label"},"maxRadius":{"name":"Max Radius","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":35,"default":100,"rebindOnChange":true},"popupShow":{"desc":"show Popup when user hovers over elements","name":"show Popup","type":[{"name":"Boolean","level":8,"order":{},"default":true,"basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}],"value":true,"default":true,"category":"Popup","rebindOnChange":true},"background":{"name":"Background","type":[{"Gray":"#cccccc","name":"Color","Empty":"#ffffff","level":10,"Neutral":"#cccccc","default":"#dc4521","subtype":{"neutral":"neutral","negative":"negative","positive":"positive"},"Negative":"#d93510","Positive":"#3f7ab5"}],"value":"#ffffff","default":"#ffffff","category":"Global Settings"},"fontFamily":{"name":"Font","type":[{"name":"EditableChoice","level":20,"values":["Arial","Helvetica","Tahoma","Consolas","Century Gothic","Courier New"],"default":""}],"value":"Arial","default":"Arial","category":"Global Settings"},"legendShow":{"name":"Show Legend","type":[{"name":"Boolean","level":8,"order":{},"default":true,"basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}],"value":true,"default":true,"category":"Legend"},"legendLabel":{"name":"Label","type":[{"name":"String","level":2,"default":"","basetype":[]}],"value":"","category":"Legend"},"labelShadowSize":{"name":"Label Shadow Size","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":2,"default":2,"category":"Label"}},"library":["d3/3.5.12/min","plotd3/0.1.0"],"local":{},"inherit":[],"metashow":null,"footer":null}